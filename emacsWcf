;;; -*- mode: lisp -*-
;;; .emacs
;;; author: owen263@gmail.com

;; Turn on debugging (comment this out for normal use)
(setq debug-on-error t)
;Emacs with the `--debug-init'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Theme and frame size.

;; NOTE: put all other globa set below the theme settings.

;;-- GUI
;; When there is window system, in case -nw is not used.
(when (not (equal window-system nil))

	;; Evaluate the following when the others have errors loading and make color, font and themes absurd.
	(custom-set-faces
		'(default ((t (:family "Consolas" :foundry "outline" :slant normal :weight normal :height 145 :width normal)))))
	
	;(set-fontset-font nil 'utf-8 '"Microsoft Yahei")
	;(set-face-attribute 'default nil :family "Consolas")
	;; Set fallback fontset for unicode chars.
	(set-fontset-font "fontset-default" 'unicode
						"Microsoft YaHei" nil 'prepend)
	
	(setq default-frame-alist '( 
		(top . 0) (left . 100)
	;	(width . 75) (height . (/ (* 30 (display-pixel-height) ) 768) )
		(width . 75) (height . 30)
		)
	)
	
	(modify-frame-parameters nil '((wait-for-wm . nil))) ;; make font displaying faster.

	(custom-set-variables
	 ;; custom-set-variables was added by Custom.
	 ;; If you edit it by hand, you could mess it up, so be careful.
	 ;; Your init file should contain only one such instance.
	 ;; If there is more than one, they won't work right.
	 '(ansi-color-names-vector ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
	 '(custom-enabled-themes (quote (manoj-dark)))
	 '(ede-project-directories (quote ("e:/itk" "e:/itk/Modules")))
	 '(size-indication-mode t))

	(global-linum-mode t) ; M-x linum-mode
	(tool-bar-mode -1) ; ÈöêËóèÂ∑•ÂÖ∑Ê†è
)
(menu-bar-mode -1) ; ÈöêËóèËèúÂçïÊ†è

(setq inhibit-splash-screen t) ; Remove splash screen
(setq initial-scratch-message nil) ; Set initial scratch message to nil.

(setq visible-bell t) ;turn off annoying beep.
(setq scroll-preserve-screen-position t) ;; smooth scrolling

(display-time-mode t)
(show-paren-mode t)
(column-number-mode t)
(when (fboundp 'size-indication-mode) (size-indication-mode t)) ;indicate the buffer size, in case that you delete blocks by mistake and cannot notice the damn fatal mistake. fboundp returns ture if the function symbol size-indication-mode is defined, false if undefined. Emacs 21 and 22.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'before-save-hook 'time-stamp)

(setq delete-by-moving-to-trash t) ; Making deleted files go to the trash can.

(setq default-enable-multibyte-characters t)
(setq ansi-color-for-comint-mode t)

(set-language-environment 'utf-8)
(fset 'yes-or-no-p 'y-or-n-p) ;make the y or n suffice for a yes or no question.

;(setq kill-whole-line t)

;;; tabs to spaces and tab width
(setq-default indent-tabs-mode nil)
(setq indent-tabs-width 4)
(setq default-tab-width 4)
;(define-key text-mode-map (kbd "TAB") 'self-insert-command) ; only in text-mode, pressing TAB will not indent apropriately but insert TAB.
;; Reset these so it indents like in VS.

; Make 'C-x C-f' completion case-sensitive.
(setq read-file-name-completion-ignore-case nil)
(prefer-coding-system 'utf-8)
(setq default-truncate-lines nil) ;t is true. nil is false.

(delete-selection-mode t) ;transient-mark-mode will be set t automatically after this.
(transient-mark-mode t) ;highlight the active region.
;(setq default-input-method nil) ;avoid chinese input method when init emacs.
(font-lock-mode t) ; syntax highlighted.

; ;;; copy rectangle
; (defun kill-rectangle-save (start end)
;	"Save the region-rectangle as the last killed one."
;	(interactive "r")
;	(require 'rect)				; Make sure killed-rectangle is defvar'ed.
;	(setq killed-rectangle (extract-rectangle start end))
;	(message "Rectangle saved")
; )

;; text mode, autoinserts and write hooks
(setq default-major-mode 'text-mode)
;(setq fill-column 78)
;(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'write-file-hooks 'copyright-update)
;(add-hook 'write-file-hooks 'delete-trailing-whitespace)
(setq ispell-program-name "aspell") ; ispell program.
(auto-image-file-mode 1) ; autoimage
;; shell-command completion
;(shell-command-activate-advices)
(setq shell-command-enable-completions t)

;(setq sentence-end "[.?!][]\"')]*\\($\\|\t\\| \\)[ \t\n]*") ;the default.
;(setq sentence-end "[.?!\),][]\"')]*\\($\\|\t\\| \\)*[ \t\n]*\\|[„ÄÇÔºåÔºõÔºüÔºÅÔºâ][ÔºΩ‚Äù‚ÄôÔºâ]*[$\t ]*[ \t\n]*")
(setq sentence-end "[.?!,][]\"')]*\\($\\|\t\\| \\)[ \t\n]*\\|[„ÄÇÔºåÔºõÔºüÔºÅÔºâ][ÔºΩ‚Äù‚ÄôÔºâ]*[$\t ]*[ \t\n]*")
(setq sentence-end-double-space nil) ; SENTENCES separated by just one space

;(define-key c-mode-map (kbd "C-c c") 'compile)
;(define-key c-mode-map (kbd "C-c n") 'next-error)

;(global-set-key "-." 'dirs) ; C-q C-c to insert Ctrl character.
;Strings can't contain non-ASCII control characters. Use (kbd "C-.") or
;[?\C-.] etc instead.

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; Shourcut

;;Áî®meta spaceÈîÆÊù•set-markÔºåËøôÊ†∑ÔºåC-SPCÂ∞±ÂèØ‰ª•Áî®Êù•Ë∞ÉÁî®Â§ñÈÉ®ËæìÂÖ•Ê≥ï‰∫Ü„ÄÇM-SPC (translated from <escape> SPC) runs the command just-one-space.
;(global-set-key (kbd "C-SPC") 'nil)
(global-set-key (kbd "M-SPC") 'set-mark-command)

; The original C-M-% just doen't work for Escape key.
(global-set-key (kbd "<f7>") nil)
(global-set-key (kbd "<f7> %") 'query-replace-regexp)

; revert-buffer key.
; (global-set-key (kbd "C-;") 'revert-buffer)
(global-set-key (kbd "\e\e;") 'revert-buffer)

;; global-set-key
(global-set-key (kbd "C-:") 'time-stamp) ; C-: was previously undefined.
(global-set-key (kbd "C-t") 'toggle-truncate-lines) ; C-t is by default transpose-chars.
;(use-hard-newlines t) ;make RET insert hard newlines.
(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-c n") 'next-error)
(global-set-key (kbd "C-c /") 'comment-or-uncomment-region)

; (global-set-key (kbd "TAB") 'self-insert-command) ; for Fundamental mode.

;; Buffer

; replace buffer-menu by ibuffer.
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-expert t)
(add-hook 'ibuffer-mode-hook 
	'(lambda ()
	(ibuffer-auto-mode 1)
	(toggle-truncate-lines 1)))

;; Tramp

; (require 'tramp)
(setq tramp-default-user "wangcf"
		tramp-default-host "127.0.0.1")
;		tramp-shell-prompt-pattern "\\([\\w/:@~]+\\|\\)*")
; "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*"

;; Bookmark.

(setq bookmark-save-flag 1)
(setq bookmark-default-file "~/.emacs.bmk")
; Ëøô‰ºöÊää‰π¶Á≠æ‰øùÂ≠òÂà∞~/.emacs.bmk
; One more thing, perhaps, if you didn't know. Once you've typed the path after C-x C-f you can then use:
; C-x C-f M-p or M-n to navigate the history of the files you've opened up and down.
; C-x C-f M-r to search the history by providing it with regular expression (one downside though, you won't see the match it is going to make while you type the regexp). 

;; Dired

(when (eq system-type 'windows-nt)

	;; Type F9 to open file in Dired mode.
	(defun w32-browser (doc)
	(w32-shell-execute 1 doc))
	
; (eval-after-load "dired" '(define-key dired-mode-map [f9] (lambda () (interactive) (w32-browser (dired-replace-in-string "/" "\\" (dired-get-filename))))))
	(eval-after-load "dired"
	'(define-key dired-mode-map [f9] 
		(lambda ()
			(interactive)
			(w32-browser (dired-get-filename)))))

;;; Windows explorer to open current file - Arun Ravindran
	(defun explorer ()
	"Launch the windows explorer in the current directory and selects current file"
	(interactive)
	(w32-shell-execute
	 "open"
	 "explorer"
	(concat "/e,/select," (convert-standard-filename buffer-file-name))))

	(defun explorerInDired ()
	"Launch the windows explorer in the current directory and selects current file"
	(interactive)
	(w32-shell-execute
	 "open"
	 "explorer"
	 (concat "/e,/select," (convert-standard-filename default-directory))))

	(defun cmd ()
	"Launch the windows cmd in the current directory"
	(interactive)
	(w32-shell-execute
	 "open"
	 "cmd"
	 ;;(concat "/e,/select," (convert-standard-filename buffer-file-name))
	 ))

	;(global-set-key (kbd "F12") 'explorer)			 ; F12 - Open Explorer for the current file path
	;(define-key dired-mode-map (kbd ""))

)

;; Python

(defun insertTab (&optional unindented-ok)
	"Insert Tab."
	(interactive "p")
	(insert-char #x09)
)

(add-hook 'python-mode-hook
	(lambda ()
	; (setq indent-tabs-mode t)
	(setq python-indent 4)
	(setq tab-width 4)
	(remove-hook 'post-self-insert-hook 'python-indent-post-self-insert-function 'local)
;	(set (make-local-variable 'indent-line-function) #'indent-relative))
;	(set (make-local-variable 'indent-line-function) #'insertTab))
;; Remember to comment out the following in python.el.gz:
;	 (add-hook 'post-self-insert-hook
;			 'python-indent-post-self-insert-function nil 'local)
))


;; C++

(setq-default c-syntatic-indentation nil) ; disable indentation engine of c++ mode.

(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.txx\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))

;; turn off the electric-state.
(add-hook 'c-mode-hook
			'(lambda()
				(c-toggle-electric-state -1)))
(add-hook 'c++-mode-hook '(lambda()
							(c-toggle-electric-state -1)))
;(add-hook 'c-mode-base-map-hook (c-toggle-electric-state -1)) ;seems doesn't work.
;c-mode-base-map because c-mode-map, c++-mode-map, and so on, inherit from it.

(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
; (electric-indent-mode -1)


; (when (fboundp 'electric-pair-mode)
;	(electric-pair-mode t)
; )


;; HTML

; http://ergoemacs.org/emacs/emacs_html.html
(defun wcfReplaceHtml-chars-region (start end)
	"Replace ‚Äú<‚Äù to ‚Äú&lt;‚Äù and other chars in HTML. This works on the current region."
	(interactive "r")
	(save-restriction
	(narrow-to-region start end)
	(goto-char (point-min))
	(while (search-forward "&" nil t) (replace-match "&amp;" nil t))
	(goto-char (point-min))
	(while (search-forward "<" nil t) (replace-match "&lt;" nil t))
	(goto-char (point-min))
	(while (search-forward ">" nil t) (replace-match "&gt;" nil t))
	)
)
(defun wcfRestoreHtml-chars-region (start end)
	"Replace ‚Äú&lt;‚Äù to ‚Äú<‚Äù and other chars in HTML. This works on the current region."
	(interactive "r")
	(save-restriction
	(narrow-to-region start end)
	(goto-char (point-min))
	(while (search-forward "&amp;" nil t) (replace-match "&" nil t))
	(goto-char (point-min))
	(while (search-forward "&lt;" nil t) (replace-match "<" nil t))
	(goto-char (point-min))
	(while (search-forward "&gt;" nil t) (replace-match ">" nil t))
	)
)

;; Make inserting code bring no newlines.
(add-hook 'html-mode-hook
	(lambda()
		(add-to-list 'html-tag-alist '("code"))
		; Disable html autoview.
		(html-autoview-mode -1)
	)
)

(defun wcfInsertNoteHead ()
	"Insert notes' head."
	(interactive)
	(goto-char (point-min))
	(insert "<!-- -*- mode:html; -*- -->")
)

(defun wcfHtmlOccur ()
	"List all html headers in occur buffer."
	(interactive)
	(occur "\\(<h[1-6]>.*</h[1-6]>\\)\\|\\(<article>\\)")
)
(global-set-key (kbd "<f7>") nil)
(global-set-key (kbd "<f7> s") nil)
(global-set-key (kbd "<f7> s o") 'wcfHtmlOccur)

(defun wcfPhpHtmlEntities ()
	"Insert php string and convert it with html entities."
	(interactive)
	(insert "<?php
$str=<<<'EOT'

EOT;
echo htmlspecialchars($str);
?>"
	)
)
(global-set-key (kbd "<f7> p h") 'wcfPhpHtmlEntities)

;; Packages.

(when (>= emacs-major-version 24)
	(require 'package)
	;; melpa is emacswiki archive.
	(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
	(package-initialize)
)
; (load-file "~/wcfShells/emacsEls/wcfModules/wcfPackages.el")

;; OS-specific.

;; Must put those OS-specific scripts in the end, because they may have some prerequisites to be loaded before.
(load-file "~/wcfShells/emacsEls/wcfModulesLoad.el")

